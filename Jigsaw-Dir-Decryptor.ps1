# PowerShell Script to decrypt files encrypted by the Jigsaw malware
# Errors will not stop the script; they will be ignored and script will continue execution
$ErrorActionPreference = "SilentlyContinue"
# Set the directory containing the .fun files
$directory = Get-Location
$files = Get-ChildItem -Path $directory -Filter "*.fun"
# Turns a string into a byte array which is used as the encryption key for decryption algorithm
$EncryptionKey = [System.Convert]::FromBase64String("OoIsAwwF23cICQoLDA0ODe==")
# Initialize AesManaged object (part of .NET framework which handles encryption/decryption of AES)
$AESProvider = New-Object 'System.Security.Cryptography.AesManaged'
$AESProvider.Key = $EncryptionKey # Set object's key to encryption key
# Initialization vector which is used to introduce randomness into AES encryption
[Byte[]]$IV = (0, 1, 0, 3, 5, 3, 0, 1, 0, 0, 2, 0, 6, 7, 6, 0)
$AESProvider.IV = $IV
foreach ($file in $files) {
    # Reads content of the encrypted file as a byte array
    $ciphertext = Get-Content -Path $file.FullName -Encoding Byte
    # Check if file size is greater than 16 bytes before decryption
    if ($ciphertext.Length -le 16) {
        Write-Host "File `($file.Name`) is too small to be decrypted or is not properly encrypted."
        continue
    }
	# Creates decryptor from AESProvider and is used to decrypt file
	$decryptor = $AESProvider.CreateDecryptor()
	$plaintext = $decryptor.TransformFinalBlock($ciphertext, 0, $ciphertext.Length)

	# Converts the decrypted bytes back to text and saves file
	$decryptedContent = [System.Text.Encoding]::ASCII.GetString($plaintext)
	$originalFilePath = [io.path]::ChangeExtension($file.FullName, $null) # Removes the .fun extension
	$decryptedContent | Out-File -FilePath $originalFilePath -Encoding ASCII

	Write-Host "Decrypted `($file.Name`) and restored to original file."

}
